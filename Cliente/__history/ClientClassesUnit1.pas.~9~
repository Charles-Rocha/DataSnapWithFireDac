//
// Created by the DataSnap proxy generator.
// 26/02/2023 16:45:26
// 

unit ClientClassesUnit1;

interface

uses System.JSON, Data.DBXCommon, Data.DBXClient, Data.DBXDataSnap, Data.DBXJSON, Datasnap.DSProxy, System.Classes, System.SysUtils, Data.DB, Data.SqlExpr, Data.DBXDBReaders, Data.DBXCDSReaders, Data.DBXJSONReflect;

type
  TServerMethods1Client = class(TDSAdminClient)
  private
    FEchoStringCommand: TDBXCommand;
    FReverseStringCommand: TDBXCommand;
    FInserePessoaCommand: TDBXCommand;
    FAtualizaPessoaCommand: TDBXCommand;
    FDeletaPessoaCommand: TDBXCommand;
    FMostraTextoCommand: TDBXCommand;
  public
    constructor Create(ADBXConnection: TDBXConnection); overload;
    constructor Create(ADBXConnection: TDBXConnection; AInstanceOwner: Boolean); overload;
    destructor Destroy; override;
    function EchoString(Value: string): string;
    function ReverseString(Value: string): string;
    procedure InserePessoa(flnatureza: Integer; dsdocumento: string; nmprimeiro: string; nmsegundo: string; dtregistro: TDateTime);
    procedure AtualizaPessoa(idPessoa: Integer; flnatureza: Integer; dsdocumento: string; nmprimeiro: string; nmsegundo: string; dtregistro: TDateTime);
    procedure DeletaPessoa(idPessoa: Integer);
    function MostraTexto: string;
  end;

implementation

function TServerMethods1Client.EchoString(Value: string): string;
begin
  if FEchoStringCommand = nil then
  begin
    FEchoStringCommand := FDBXConnection.CreateCommand;
    FEchoStringCommand.CommandType := TDBXCommandTypes.DSServerMethod;
    FEchoStringCommand.Text := 'TServerMethods1.EchoString';
    FEchoStringCommand.Prepare;
  end;
  FEchoStringCommand.Parameters[0].Value.SetWideString(Value);
  FEchoStringCommand.ExecuteUpdate;
  Result := FEchoStringCommand.Parameters[1].Value.GetWideString;
end;

function TServerMethods1Client.ReverseString(Value: string): string;
begin
  if FReverseStringCommand = nil then
  begin
    FReverseStringCommand := FDBXConnection.CreateCommand;
    FReverseStringCommand.CommandType := TDBXCommandTypes.DSServerMethod;
    FReverseStringCommand.Text := 'TServerMethods1.ReverseString';
    FReverseStringCommand.Prepare;
  end;
  FReverseStringCommand.Parameters[0].Value.SetWideString(Value);
  FReverseStringCommand.ExecuteUpdate;
  Result := FReverseStringCommand.Parameters[1].Value.GetWideString;
end;

procedure TServerMethods1Client.InserePessoa(flnatureza: Integer; dsdocumento: string; nmprimeiro: string; nmsegundo: string; dtregistro: TDateTime);
begin
  if FInserePessoaCommand = nil then
  begin
    FInserePessoaCommand := FDBXConnection.CreateCommand;
    FInserePessoaCommand.CommandType := TDBXCommandTypes.DSServerMethod;
    FInserePessoaCommand.Text := 'TServerMethods1.InserePessoa';
    FInserePessoaCommand.Prepare;
  end;
  FInserePessoaCommand.Parameters[0].Value.SetInt32(flnatureza);
  FInserePessoaCommand.Parameters[1].Value.SetWideString(dsdocumento);
  FInserePessoaCommand.Parameters[2].Value.SetWideString(nmprimeiro);
  FInserePessoaCommand.Parameters[3].Value.SetWideString(nmsegundo);
  FInserePessoaCommand.Parameters[4].Value.AsDateTime := dtregistro;
  FInserePessoaCommand.ExecuteUpdate;
end;

procedure TServerMethods1Client.AtualizaPessoa(idPessoa: Integer; flnatureza: Integer; dsdocumento: string; nmprimeiro: string; nmsegundo: string; dtregistro: TDateTime);
begin
  if FAtualizaPessoaCommand = nil then
  begin
    FAtualizaPessoaCommand := FDBXConnection.CreateCommand;
    FAtualizaPessoaCommand.CommandType := TDBXCommandTypes.DSServerMethod;
    FAtualizaPessoaCommand.Text := 'TServerMethods1.AtualizaPessoa';
    FAtualizaPessoaCommand.Prepare;
  end;
  FAtualizaPessoaCommand.Parameters[0].Value.SetInt32(idPessoa);
  FAtualizaPessoaCommand.Parameters[1].Value.SetInt32(flnatureza);
  FAtualizaPessoaCommand.Parameters[2].Value.SetWideString(dsdocumento);
  FAtualizaPessoaCommand.Parameters[3].Value.SetWideString(nmprimeiro);
  FAtualizaPessoaCommand.Parameters[4].Value.SetWideString(nmsegundo);
  FAtualizaPessoaCommand.Parameters[5].Value.AsDateTime := dtregistro;
  FAtualizaPessoaCommand.ExecuteUpdate;
end;

procedure TServerMethods1Client.DeletaPessoa(idPessoa: Integer);
begin
  if FDeletaPessoaCommand = nil then
  begin
    FDeletaPessoaCommand := FDBXConnection.CreateCommand;
    FDeletaPessoaCommand.CommandType := TDBXCommandTypes.DSServerMethod;
    FDeletaPessoaCommand.Text := 'TServerMethods1.DeletaPessoa';
    FDeletaPessoaCommand.Prepare;
  end;
  FDeletaPessoaCommand.Parameters[0].Value.SetInt32(idPessoa);
  FDeletaPessoaCommand.ExecuteUpdate;
end;

function TServerMethods1Client.MostraTexto: string;
begin
  if FMostraTextoCommand = nil then
  begin
    FMostraTextoCommand := FDBXConnection.CreateCommand;
    FMostraTextoCommand.CommandType := TDBXCommandTypes.DSServerMethod;
    FMostraTextoCommand.Text := 'TServerMethods1.MostraTexto';
    FMostraTextoCommand.Prepare;
  end;
  FMostraTextoCommand.ExecuteUpdate;
  Result := FMostraTextoCommand.Parameters[0].Value.GetWideString;
end;


constructor TServerMethods1Client.Create(ADBXConnection: TDBXConnection);
begin
  inherited Create(ADBXConnection);
end;


constructor TServerMethods1Client.Create(ADBXConnection: TDBXConnection; AInstanceOwner: Boolean);
begin
  inherited Create(ADBXConnection, AInstanceOwner);
end;


destructor TServerMethods1Client.Destroy;
begin
  FEchoStringCommand.DisposeOf;
  FReverseStringCommand.DisposeOf;
  FInserePessoaCommand.DisposeOf;
  FAtualizaPessoaCommand.DisposeOf;
  FDeletaPessoaCommand.DisposeOf;
  FMostraTextoCommand.DisposeOf;
  inherited;
end;

end.

